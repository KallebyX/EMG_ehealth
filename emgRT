import serial
import numpy as np
from scipy.signal import butter, filtfilt, iirnotch
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

# Configuração da porta serial
port = 'COM3'
baud_rate = 115200
ser = serial.Serial(port, baudrate=baud_rate, timeout=1)

# Configuração inicial para filtros
fs = 1000  # Taxa de amostragem
low_cutoff = 50
notch_freq = 60
quality_factor = 30
b_low, a_low = butter(6, low_cutoff / (0.5 * fs), btype='low')
b_notch, a_notch = iirnotch(notch_freq / (0.5 * fs), quality_factor)

# Buffer de dados
data_buffer = np.array([])

def update_data(new_data):
    global data_buffer
    data_buffer = np.append(data_buffer, new_data)
    if len(data_buffer) > 2000:
        data_buffer = data_buffer[-2000:]  # Mantém apenas os últimos 2000 pontos

def apply_filters(data):
    low_passed = filtfilt(b_low, a_low, data)
    notch_filtered = filtfilt(b_notch, a_notch, low_passed)
    return notch_filtered

fig, ax = plt.subplots()
xdata, ydata = [], []
line1, = ax.plot([], [], 'b-', label='Raw Data')
line2, = ax.plot([], [], 'r-', label='Filtered Data')

def init():
    ax.set_xlim(0, 2000)
    ax.set_ylim(-5, 5)
    return line1, line2

def update(frame):
    value = read_serial_data()
    if value is not None:
        update_data(value)
        filtered_data = apply_filters(data_buffer)
        xdata = np.arange(len(data_buffer))
        line1.set_data(xdata, data_buffer)
        line2.set_data(xdata, filtered_data)
        ax.set_xlim(max(0, len(data_buffer)-2000), max(2000, len(data_buffer)))
    return line1, line2

def read_serial_data():
    if ser.in_waiting:
        line = ser.readline().decode().strip()
        try:
            return float(line)
        except ValueError:
            return None

ani = FuncAnimation(fig, update, init_func=init, interval=50, blit=True)
plt.legend()
plt.show()
